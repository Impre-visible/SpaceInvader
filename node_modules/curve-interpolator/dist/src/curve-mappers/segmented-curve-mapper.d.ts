import { AbstractCurveMapper } from "./abstract-curve-mapper";
/**
 * Approximate spline curve by subdividing it into smaller linear
 * line segments. Used to approximate length and mapping between
 * uniform (u) and non-uniform (t) time along curve.
 */
export declare class SegmentedCurveMapper extends AbstractCurveMapper {
    _subDivisions: number;
    /**
     *
     * @param subDivisions number of sub divisions to use
     * @param onInvalidateCache callback function to be invoked when cache is invalidated
     */
    constructor(subDivisions?: number, onInvalidateCache?: () => void);
    get arcLengths(): any;
    /**
     * Clear cache
     */
    _invalidateCache(): void;
    /**
     * Break curve into segments and return the curve length at each segment index.
     * Used for mapping between t and u along the curve.
     */
    computeArcLengths(): any[];
    /**
     * Get curve length at u
     * @param u normalized uniform position along the spline curve
     * @returns length in point coordinates
     */
    lengthAt(u: number): number;
    /**
     * Maps a uniform time along the curve to non-uniform time (t)
     * @param u normalized uniform position along the spline curve
     * @returns t encoding segment index and local time along curve
     */
    getT(u: number): number;
    /**
     * Maps a non-uniform time along the curve to uniform time (u)
     * @param t non-uniform time along curve
     * @returns uniform time along curve
     */
    getU(t: number): number;
}
