import { CurveMapper, SegmentFunction, Vector } from "../core/interfaces";
/**
 * The curve mapper's main responsibility is to map between normalized
 * curve position (u) to curve segments and segment position (t). Since
 * it requires access to control points and curve parameters, it also keeps
 * this data along with an internal cache. For this reason, the common
 * functionality has been but into this abstract class definition, so that
 * the mapping specific implementation can be held at a minimum by extending
 * this class.
 */
export declare abstract class AbstractCurveMapper implements CurveMapper {
    _subDivisions: number;
    _cache: object;
    _points: Vector[];
    _alpha: number;
    _tension: number;
    _closed: boolean;
    _onInvalidateCache: () => void;
    /**
     * AbstractCurveMapper Constructor
     * @param onInvalidateCache callback function to be invoked when cache needs to be reset
     */
    constructor(onInvalidateCache?: () => void);
    /**
     * Clears cache and invoke callback if provided
     * @returns void
     */
    protected _invalidateCache(): void;
    /**
     * Returns the curve length in point coordinates from the global
     * curve position u, where u=1 is the full length of the curve.
     * @param u normalized position on curve (0..1)
     */
    abstract lengthAt(u: number): number;
    abstract getT(u: number): number;
    abstract getU(t: number): number;
    /**
     * Curve alpha parameter (0=uniform, 0.5=centripetal, 1=chordal)
     */
    get alpha(): number;
    set alpha(alpha: number);
    /**
     * Curve tension (0=Catmull-rom, 1=linear)
     */
    get tension(): number;
    set tension(tension: number);
    /**
     * Control points for curve
     */
    get points(): Vector[];
    set points(points: Vector[]);
    /**
     * Determines whether the curve should be a closed curve or not
     */
    get closed(): boolean;
    set closed(closed: boolean);
    reset(): void;
    /**
     * Evaluate curve segment function at t
     * @param t time along full curve (encodes segment index and segment t)
     * @param target optional target vector
     * @returns vector
     */
    evaluateForT(func: SegmentFunction, t: number, target?: Vector): Vector;
    /**
     * Get the curve function coefficients at the given segment index. The coefficients
     * are calculated once per segment and put in cache until it is invalidated.
     * @param idx segment index
     * @returns coefficients for the curve function at the given segment index
     */
    getCoefficients(idx: number): any;
}
