import { Vector } from './interfaces';
export declare const EPS: number;
/**
 * Solve 2nd degree equations
 * @param a 2nd degree coefficient
 * @param b 1st degree coefficient
 * @param c constant coefficient
 */
export declare function getQuadRoots(a: number, b: number, c: number): number[];
/**
 * Solve 3rd degree equations
 * @param a 3rd degree coefficient
 * @param b 2nd degree coefficient
 * @param c 1st degree coefficient
 * @param d constant coefficient
 */
export declare function getCubicRoots(a: number, b: number, c: number, d: number): number[];
/**
 * Get the dot product of two vectors
 * @param v1 Vector
 * @param v2 Vector
 * @returns Dot product
 */
export declare function dot(v1: Vector, v2: Vector): number;
/**
 * Get the cross product of two 3d vectors. For 2d vectors, we imply the z-component
 * is zero and return a 3d vector. The function returns undefined for dimensions > 3.
 * @param v1 Vector
 * @param v2 Vector
 * @param target optional target
 * @returns Vector perpendicular to p1 and p2
 */
export declare function cross(v1: Vector, v2: Vector, target?: Vector): Vector;
/**
 * Add two vectors
 * @param v1 Vector
 * @param v2 Vector
 * @param target optional target
 * @returns Sum of v1 and v2
 */
export declare function add(v1: Vector, v2: Vector, target?: Vector): Vector;
/**
 * Subtract two vectors
 * @param v1 Vector
 * @param v2 Vector
 * @param target optional target
 * @returns Difference of v1 and v2
 */
export declare function sub(v1: Vector, v2: Vector, target?: Vector): Vector;
/**
 * Calculate the sum of squares between two points
 * @param v1 coordinates of point 1
 * @param v2 coordinates of point 2
 */
export declare function sumOfSquares(v1: Vector, v2: Vector): number;
/**
 * Calculate the magnitude/length of a vector
 * @param v coordinates of the vector
 */
export declare function magnitude(v: Vector): number;
/**
 * Calculate the distance between two points
 * @param p1 coordinates of point 1
 * @param p2 coordinates of point 2
 * @returns the distance between p1 and p2
 */
export declare function distance(p1: Vector, p2: Vector): number;
/**
 * Normalizes a vector (mutate input)
 * @param v input array/vector to normalize
 * @param target optional target
 * @return normalized vector v
 */
export declare function normalize(v: Vector, target?: Vector): Vector;
/**
 * Rotates a vector 90 degrees to make it orthogonal (mutates input vector)
 * @param v vector to rotate
 * @param target optional target
 */
export declare function orthogonal(v: Vector, target?: Vector): Vector;
/**
 * Rotate a 2d point at the specified angle around the anchor point (0,0)
 * @param vector vector to rotate
 * @param anchor anchor point to rotate around
 * @param angle angle of rotation in radians
 * @param target optional target
 * @returns rotated vector
 */
export declare function rotate2d(vector: Vector, angle?: number, anchor?: Vector, target?: Vector): Vector;
/**
 * Rotate a 3d point around the given axis and angle
 * @param vector vector to rotate
 * @param axis vector defining the rotation axis
 * @param angle angle of rotation in radians
 * @param target optional target
 * @returns rotated vector
 */
export declare function rotate3d(vector: Vector, axis?: Vector, angle?: number, target?: Vector): Vector;
