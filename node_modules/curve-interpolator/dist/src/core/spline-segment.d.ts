import { NumArray4, Vector, CurveParameters, SegmentFunction } from "./interfaces";
/**
 * This function will calculate the knot sequence, based on a given value for alpha, for a set of
 * control points for a curve segment. It is used to calculate the velocity vectors, which
 * determines the curvature of the segment. Alpha=0.5 produces a centripetal curve, while
 * alpha=1 produces a chordal curve.
 * @param p0 First control point
 * @param p1 Second control point
 * @param p2 Third control point
 * @param p3 Fourth control point
 * @param alpha alpha value
 * @returns calculated knot sequence to use for curve velocity vector calculations
 */
export declare function calcKnotSequence(p0: Vector, p1: Vector, p2: Vector, p3: Vector, alpha?: number): NumArray4;
/**
 * Calculate coefficients for a curve segment with specified parameters
 * @param p0 control point 1
 * @param p1 control point 2
 * @param p2 control point 3
 * @param p3 control point 4
 * @param options curve parameters
 * @returns coefficients for curve function
 */
export declare function calculateCoefficients(p0: Vector, p1: Vector, p2: Vector, p3: Vector, options: CurveParameters): NumArray4[];
/**
 * Calculates vector component for a point along the curve segment at time t
 * @param t time along curve segment
 * @param coefficients coefficients for curve function
 * @returns curve value
 */
export declare function valueAtT(t: number, coefficients: NumArray4): number;
/**
 * Calculates vector component for the derivative of the curve segment at time t
 * @param t time along curve segment
 * @param coefficients coefficients for curve function
 * @returns derivative (t')
 */
export declare function derivativeAtT(t: number, coefficients: NumArray4): number;
/**
 * Calculates vector component for the second derivative of the curve segment at time t
 * @param t time along curve segment
 * @param coefficients coefficients for curve function
 * @returns second derivative (t'')
 */
export declare function secondDerivativeAtT(t: number, coefficients: NumArray4): number;
/**
 * Solves the cubic spline equation and return t
 * @param lookup target lookup value
 * @param coefficients lookup axis coefficients
 */
export declare function findRootsOfT(lookup: number, coefficients: NumArray4): number[];
/**
 * Convenience function for evaluating segment functions for all components of a vector
 * @param func SegmentFunction to evaluate
 * @param t time along curve segment
 * @param coefficients coefficients for curve function (for each component)
 * @param target target vector
 * @returns vector
 */
export declare function evaluateForT(func: SegmentFunction, t: number, coefficients: NumArray4[], target?: Vector): Vector;
